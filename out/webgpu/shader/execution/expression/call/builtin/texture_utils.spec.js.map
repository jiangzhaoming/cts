{"version":3,"file":"texture_utils.spec.js","names":["description","makeTestGroup","assert","GPUTest","getTextureDimensionFromView","virtualMipSize","kTexelRepresentationInfo","chooseTextureSize","createTextureWithRandomDataAndGetTexels","isSupportedViewFormatCombo","readTextureToTexelViews","texelsApproximatelyEqual","g","texelFormat","texel","rep","componentOrder","map","component","join","test","desc","params","u","combineWithParams","srcFormat","texelViewFormat","combine","filter","t","viewDimension","beforeAllSubcases","skipIfTextureViewDimensionNotSupported","fn","size","minSize","minBlocks","format","descriptor","dimension","mipLevelCount","usage","GPUTextureUsage","COPY_DST","TEXTURE_BINDING","isCompatibility","textureBindingViewDimension","texels","expectedTexelViews","texture","actualTexelViews","length","errors","mipLevel","actualMipLevelTexelView","expectedMipLevelTexelView","mipLevelSize","actualRep","expectedRep","z","y","x","actual","color","expected","maxFractionalDiff","actualStr","expectedStr","push"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/texture_utils.spec.ts"],"sourcesContent":["export const description = `\nTests for texture_utils.ts\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { assert } from '../../../../../../common/util/util.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { getTextureDimensionFromView, virtualMipSize } from '../../../../../util/texture/base.js';\nimport {\n  kTexelRepresentationInfo,\n  PerTexelComponent,\n  TexelRepresentationInfo,\n} from '../../../../../util/texture/texel_data.js';\n\nimport {\n  chooseTextureSize,\n  createTextureWithRandomDataAndGetTexels,\n  isSupportedViewFormatCombo,\n  readTextureToTexelViews,\n  texelsApproximatelyEqual,\n} from './texture_utils.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nfunction texelFormat(texel: Readonly<PerTexelComponent<number>>, rep: TexelRepresentationInfo) {\n  return rep.componentOrder.map(component => `${component}: ${texel[component]}`).join(', ');\n}\n\ng.test('readTextureToTexelViews')\n  .desc('test readTextureToTexelViews for various formats and dimensions')\n  .params(u =>\n    u\n      .combineWithParams([\n        { srcFormat: 'r8unorm', texelViewFormat: 'rgba32float' },\n        { srcFormat: 'r8sint', texelViewFormat: 'rgba32sint' },\n        { srcFormat: 'r8uint', texelViewFormat: 'rgba32uint' },\n        { srcFormat: 'rgba32float', texelViewFormat: 'rgba32float' },\n        { srcFormat: 'rgba32uint', texelViewFormat: 'rgba32uint' },\n        { srcFormat: 'rgba32sint', texelViewFormat: 'rgba32sint' },\n        { srcFormat: 'depth24plus', texelViewFormat: 'rgba32float' },\n        { srcFormat: 'depth24plus', texelViewFormat: 'r32float' },\n        { srcFormat: 'depth24plus-stencil8', texelViewFormat: 'r32float' },\n        { srcFormat: 'stencil8', texelViewFormat: 'rgba32sint' },\n      ] as const)\n      .combine('viewDimension', ['1d', '2d', '2d-array', '3d', 'cube', 'cube-array'] as const)\n      .filter(t => isSupportedViewFormatCombo(t.srcFormat, t.viewDimension))\n  )\n  .beforeAllSubcases(t => {\n    t.skipIfTextureViewDimensionNotSupported(t.params.viewDimension);\n  })\n  .fn(async t => {\n    const { srcFormat, texelViewFormat, viewDimension } = t.params;\n    const size = chooseTextureSize({ minSize: 8, minBlocks: 4, format: srcFormat, viewDimension });\n    const descriptor: GPUTextureDescriptor = {\n      format: srcFormat,\n      dimension: getTextureDimensionFromView(viewDimension),\n      size,\n      mipLevelCount: viewDimension === '1d' ? 1 : 3,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      ...(t.isCompatibility && { textureBindingViewDimension: viewDimension }),\n    };\n    const { texels: expectedTexelViews, texture } = await createTextureWithRandomDataAndGetTexels(\n      t,\n      descriptor\n    );\n    const actualTexelViews = await readTextureToTexelViews(t, texture, descriptor, texelViewFormat);\n\n    assert(actualTexelViews.length === expectedTexelViews.length, 'num mip levels match');\n\n    const errors = [];\n    for (let mipLevel = 0; mipLevel < actualTexelViews.length; ++mipLevel) {\n      const actualMipLevelTexelView = actualTexelViews[mipLevel];\n      const expectedMipLevelTexelView = expectedTexelViews[mipLevel];\n      const mipLevelSize = virtualMipSize(texture.dimension, size, mipLevel);\n\n      const actualRep = kTexelRepresentationInfo[actualMipLevelTexelView.format];\n      const expectedRep = kTexelRepresentationInfo[expectedMipLevelTexelView.format];\n\n      for (let z = 0; z < mipLevelSize[2]; ++z) {\n        for (let y = 0; y < mipLevelSize[1]; ++y) {\n          for (let x = 0; x < mipLevelSize[0]; ++x) {\n            const actual = actualMipLevelTexelView.color({ x, y, z });\n            const expected = expectedMipLevelTexelView.color({ x, y, z });\n            // This currently expects the exact same values in actual vs expected.\n            // It's possible this needs to be relaxed slightly but only for non-integer formats.\n            // For now, if the tests pass everywhere, we'll keep it at 0 tolerance.\n            const maxFractionalDiff = 0;\n            if (\n              !texelsApproximatelyEqual(\n                actual,\n                actualMipLevelTexelView.format,\n                expected,\n                expectedMipLevelTexelView.format,\n                maxFractionalDiff\n              )\n            ) {\n              const actualStr = texelFormat(actual, actualRep);\n              const expectedStr = texelFormat(expected, expectedRep);\n              errors.push(\n                `texel at ${x}, ${y}, ${z}, expected: ${expectedStr}, actual: ${actualStr}`\n              );\n            }\n          }\n        }\n      }\n\n      assert(errors.length === 0, errors.join('\\n'));\n    }\n  });\n"],"mappings":"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"}